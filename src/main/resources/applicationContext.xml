<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
         http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
         http://www.springframework.org/schema/context
         http://www.springframework.org/schema/context/spring-context-3.0.xsd
         http://www.springframework.org/schema/aop
         http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
         http://www.springframework.org/schema/tx 
         http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">
         
         <!-- <import resource="spring/datasource.xml"/> -->
    <!-- 导入Src目录下的jdbc.properties文件 -->
	<context:property-placeholder
		location="classpath:jdbc.properties" />
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<!-- 配置连接池的初始值 -->
		<property name="initialSize" value="1" />
		<!-- 连接池的最大值 -->
		<!-- <property name="maxActive" value="500"/> -->
		<!-- 最大空闲时，当经过一个高峰之后，连接池可以将一些用不到的连接释放，一直减少到maxIdle为止 -->
		<!-- <property name="maxIdle" value="2"/> -->
		<!-- 当最小空闲时，当连接少于minIdle时会自动去申请一些连接 -->
		<property name="minIdle" value="1" />
		<property name="maxActive" value="100" />
		<property name="maxIdle" value="20" />
		<property name="maxWait" value="1000" />
	</bean>


	<!--创建Spring的SessionFactory工厂 -->
	<!-- 和hibernate4整合没有提供专门的针对Annotation的类，直接在LocalSessionFactoryBean中已经集成 -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<!-- 注入数据源 -->
		<property name="dataSource" ref="dataSource" />

		<!-- 设置Spring取那个包中查找相应的实体类 -->
		<property name="mappingResources">
			<list>
				<value>cn/com/shxt/sys_urp/domain/Module.hbm.xml</value>
				<value>cn/com/shxt/sys_urp/domain/Role.hbm.xml</value>
				<value>cn/com/shxt/sys_urp/domain/Department.hbm.xml</value>
				<value>cn/com/shxt/sys_urp/domain/Account.hbm.xml</value>
				<value>cn/com/shxt/sys_urp/domain/Member.hbm.xml</value>
				<value>cn/com/shxt/rooms/domain/Rooms.hbm.xml</value>
				<value>cn/com/shxt/rooms/domain/RoomType.hbm.xml</value>
				<value>cn/com/shxt/rooms/domain/RoomState.hbm.xml</value>
				<value>cn/com/shxt/rooms/domain/RoomSchedule.hbm.xml</value>
				<value>cn/com/shxt/rooms/domain/RoomResideRecord.hbm.xml</value>
				<value>cn/com/shxt/goods/domain/Goods.hbm.xml</value>
				<value>cn/com/shxt/goods/domain/GoodsType.hbm.xml</value>
				<value>cn/com/shxt/goods/domain/ConsumeRecord.hbm.xml</value>
			</list>

		</property>
		<property name="hibernateProperties">
			<!-- <value> hibernate.dialect=org.hibernate.dialect.HSQLDialect </value> -->
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.Oracle10gDialect</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.hbm2ddl.auto">update</prop>
				<prop key="hibernate.format_sql">false</prop>
				<!--  <prop key="hibernate.current_session_context_class">thread</prop>  -->
				<!--	<prop key="hibernate.dialect">org.hibernate.dialect.Oracle10gDialect</prop>--> 
			</props>
		</property>
	</bean>
	<!-- 配置Spring的事务处理 -->
	<!-- 创建事务管理器 -->
	<bean id="txManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<!-- 配置AOP，Spring是通过AOP来进行事务管理的 -->
	<aop:config>
		<!-- 设置pointCut表示哪些方法要加入事务处理
		以下的事务是声明在DAO中，但是通常都会在Service来处理多个业务对象逻辑的关系，注入删除，更新等，此时如果在执行了一个步骤之后抛出异常 
			就会导致数据不完整，所以事务不应该在DAO层处理，而应该在service，这也就是Spring所提供的一个非常方便的工具，声明式事务 -->
		<aop:pointcut id="allMethods"
			expression="execution(* cn.com.shxt.framework.service.*.*(..))||execution(* cn.com.shxt.base.service.*.*(..))||execution(* cn.com.shxt.sys_urp.service.*.*(..))||execution(* cn.com.shxt.goods.service.*.*(..))||execution(* cn.com.shxt.rooms.service.*.*(..))" />
		<!-- 通过advisor来确定具体要加入事务控制的方法 -->
		<aop:advisor advice-ref="txAdvice" pointcut-ref="allMethods" />
	</aop:config>

	<!-- 配置哪些方法要加入事务控制 -->
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<!-- 让所有的方法都加入事务管理，为了提高效率，可以把一些查询之类的方法设置为只读的事务 -->
			<tx:method name="*" propagation="REQUIRED" read-only="true" />
			<!-- 以下方法都是可能涉及修改的方法，就无法设置为只读 -->
			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="del*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="save*" propagation="REQUIRED" />
		</tx:attributes>
	</tx:advice>
        <!--  <import resource="spring/base-beans.xml"/> -->
    <!-- 公用的配置 -->
	<!-- dao -->
	<bean id="baseDao" class="cn.com.shxt.base.dao.BaseDaoImpl" >
		<property name="sessionFactory" ref="sessionFactory"/>
		<!-- 给HibateanteTemplate使用 -->
		<property name="dataSource" ref="dataSource"/>
	</bean>
       <!--   <import resource="spring/sys-urp.xml"/> -->
      <!-- dao -->    
     <bean id="moudleDao" class="cn.com.shxt.sys_urp.dao.MoudleDaoImpl" parent="baseDao"/>
     <bean id="roleDao"  class="cn.com.shxt.sys_urp.dao.RoleDaoImpl" parent="baseDao"/>
     <bean id="accountDao"  class="cn.com.shxt.sys_urp.dao.AccountDaoImpl" parent="baseDao"/>
     <bean id="deptDao"  class="cn.com.shxt.sys_urp.dao.DeptDaoImpl" parent="baseDao"/>
     
     
     <!-- service -->
     <bean id="accountService" class="cn.com.shxt.sys_urp.service.AccountServiceImpl">
     	<property name="accountDao" ref="accountDao"/>
     </bean>
     <bean id="roleService" class="cn.com.shxt.sys_urp.service.RoleServiceImpl">
     	<property name="roleDao" ref="roleDao"/>
     </bean>
     <bean id="moduleService" class="cn.com.shxt.sys_urp.service.ModuleServiceImpl">
     	<property name="moduleDao" ref="moudleDao"/>
     </bean>
     <bean id="deptService" class="cn.com.shxt.sys_urp.service.DeptServiceImpl">
     	<property name="deptDao" ref="deptDao"/>
     </bean>
      
      <!-- action -->   
     <bean id="accountAction" class="cn.com.shxt.sys_urp.action.AccountAction" scope="prototype">
     	<property name="accountService" ref="accountService"/>
     	<property name="deptService" ref="deptService"/>
     	<property name="roleService" ref="roleService"/>
     </bean>  
     <bean id="roleAction" class="cn.com.shxt.sys_urp.action.RoleAction" scope="prototype">
     	<property name="roleService" ref="roleService"/>
     </bean> 
     <bean id="moduleAction" class="cn.com.shxt.sys_urp.action.ModuleAction" scope="prototype">
     	<property name="moduleService" ref="moduleService"/>
     </bean>   
     
    <bean id="jsonAction" class="cn.com.shxt.statistics.action.TestJSONAction" scope="prototype">
    	<property name="resideRecordService" ref="roomResideRecordService"/>
    	<property name="consumeRecordService" ref="consumeRecordService"/>
    </bean>
    
     <bean id="goodStatisticsAction" class="cn.com.shxt.statistics.action.GoodsStatisticsAction" scope="prototype">
    	<property name="consumeRecordService" ref="consumeRecordService"/>
    </bean>
    
     <bean id="roomStatisticsAction" class="cn.com.shxt.statistics.action.RoomsStatisticsAction" scope="prototype">
    	<property name="roomResideRecordService" ref="roomResideRecordService"/>
    </bean>
         <!-- <import resource="spring/room.xml"/> -->
         <!-- dao -->    
     <bean id="roomsDao" class="cn.com.shxt.rooms.dao.RoomsDaoImpl" parent="baseDao"/>
     <bean id="roomTypeDao" class="cn.com.shxt.rooms.dao.RoomTypeDaoImpl" parent="baseDao"/>
     <bean id="roomStateDao" class="cn.com.shxt.rooms.dao.RoomStateDaoImpl" parent="baseDao"/>
     <bean id="roomScheduleDao" class="cn.com.shxt.rooms.dao.RoomScheduleDaoImpl" parent="baseDao"/>
     <bean id="roomResideRecordDao" class="cn.com.shxt.rooms.dao.RoomResideRecordDaoImpl" parent="baseDao"/>
     
     
     <!-- service -->
     <bean id="roomsService" class="cn.com.shxt.rooms.service.RoomsServiceImpl">
     	<property name="roomsDao" ref="roomsDao"/>
     </bean>
     <bean id="roomTypeService" class="cn.com.shxt.rooms.service.RoomTypeServiceImpl">
     	<property name="roomTypeDao" ref="roomTypeDao"/>
     </bean>
     <bean id="roomStateService" class="cn.com.shxt.rooms.service.RoomStateServiceImpl">
     	<property name="roomStateDao" ref="roomStateDao"/>
     </bean>
     <bean id="roomScheduleService" class="cn.com.shxt.rooms.service.RoomScheduleServiceImpl">
     	<property name="roomScheduleDao" ref="roomScheduleDao"/>
     </bean>
     <bean id="roomResideRecordService" class="cn.com.shxt.rooms.service.RoomResideRecordService">
     	<property name="roomResideRecordDao" ref="roomResideRecordDao"/>
     </bean>
     
      <!-- action -->   
     <bean id="roomsAction" class="cn.com.shxt.rooms.action.RoomsAction" scope="prototype">
     	<property name="roomsService" ref="roomsService"/>
     	<property name="roomStateService" ref="roomStateService"/>
     	<property name="roomTypeService" ref="roomTypeService"/>
     </bean>
     <bean id="roomTypeAction" class="cn.com.shxt.rooms.action.RoomTypeAction" scope="prototype">
     	<property name="roomTypeService" ref="roomTypeService"/>
     </bean>
     <bean id="roomStateAction" class="cn.com.shxt.rooms.action.RoomStateAction" scope="prototype">
     	<property name="roomStateService" ref="roomStateService"/>
     </bean>
     <bean id="roomScheduleAction" class="cn.com.shxt.rooms.action.RoomScheduleAction" scope="prototype">
     	<property name="roomScheduleService" ref="roomScheduleService"/>
     	<property name="roomStateService" ref="roomStateService"/>
     	<property name="roomsService" ref="roomsService"/>
     </bean>
     <bean id="roomResideRecordAction" class="cn.com.shxt.rooms.action.RoomResideRecordAction" scope="prototype">
     	<property name="roomResideRecordService" ref="roomResideRecordService"/>
     	<property name="roomStateService" ref="roomStateService"/>
     	<property name="roomsService" ref="roomsService"/>
     	<property name="roomTypeService" ref="roomTypeService"/>
     </bean>  
        <!--  <import resource="spring/goods.xml"/> -->
        <!-- dao -->    
     <bean id="goodsDao" class="cn.com.shxt.goods.dao.GoodsDaoImpl" parent="baseDao"/>
     <bean id="goodsTypeDao" class="cn.com.shxt.goods.dao.GoodsTypeDaoImpl" parent="baseDao"/>
     <bean id="consumeRecordDao" class="cn.com.shxt.goods.dao.ConsumeRecordDaoImpl" parent="baseDao"/>
     
     
     <!-- service -->
     <bean id="goodsService" class="cn.com.shxt.goods.service.GoodsServiceImpl">
     	<property name="goodsDao" ref="goodsDao"/>
     </bean>
     <bean id="goodsTypeService" class="cn.com.shxt.goods.service.GoodsTypeServiceImpl">
     	<property name="goodsTypeDao" ref="goodsTypeDao"/>
     </bean>
     <bean id="consumeRecordService" class="cn.com.shxt.goods.service.ConsumeRecordServiceImpl">
     	<property name="consumeRecordDao" ref="consumeRecordDao"/>
     </bean>
     
      <!-- action -->   
     <bean id="goodsAction" class="cn.com.shxt.goods.action.GoodsAction" scope="prototype">
     	<property name="goodsService" ref="goodsService"/>
     	<property name="goodsTypeService" ref="goodsTypeService"/>
     	<property name="resideService" ref="roomResideRecordService"/>
     </bean>
     <bean id="goodsTypeAction" class="cn.com.shxt.goods.action.GoodsTypeAction" scope="prototype">
     	<property name="goodsTypeService" ref="goodsTypeService"/>
     </bean>
     <bean id="consumeRecordAction" class="cn.com.shxt.goods.action.ConsumeRecordAction" scope="prototype">
     	<property name="consumeRecordService" ref="consumeRecordService"/>
     	<property name="roomResideRecordService" ref="roomResideRecordService"/>
     </bean>  
</beans>